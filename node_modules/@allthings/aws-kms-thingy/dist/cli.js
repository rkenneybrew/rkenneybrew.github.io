#!/usr/bin/env node
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var readline = require('readline');
var awsSdk = require('aws-sdk');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var readline__namespace = /*#__PURE__*/_interopNamespace(readline);

const kms$1 = new awsSdk.KMS();
const isBase64 = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;
const dictionary$1 = new Map();
async function decrypt$2(ciphertext) {
    const result = await kms$1
        .decrypt({ CiphertextBlob: Buffer.from(ciphertext, 'base64') })
        .promise();
    const plaintext = result.Plaintext ? result.Plaintext.toString() : ciphertext;
    return dictionary$1.set(ciphertext, plaintext) && plaintext;
}
var kmsDecrypt = async (ciphertext) => {
    var _a;
    const isEmptyString = ciphertext.length === 0;
    const decryptDisabled = ['1', 1, 'true', true].includes((_a = process.env.DISABLE_AWS_KMS_THINGY) !== null && _a !== void 0 ? _a : false);
    const isBase64Encoded = isBase64.test(ciphertext);
    if (isEmptyString || decryptDisabled || !isBase64Encoded) {
        return String(ciphertext);
    }
    const cached = dictionary$1.get(ciphertext);
    if (cached) {
        return cached;
    }
    return decrypt$2(ciphertext);
};

const kms = new awsSdk.KMS();
const dictionary = new Map();
async function encrypt$2({ plaintext, keyId, }) {
    const result = await kms
        .encrypt({ KeyId: keyId, Plaintext: plaintext })
        .promise();
    const ciphertext = result.CiphertextBlob
        ? result.CiphertextBlob.toString('base64')
        : plaintext;
    return dictionary.set(plaintext, ciphertext) && ciphertext;
}
var kmsEncrypt = ({ plaintext, keyId, }) => process.env.DISABLE_AWS_KMS_THINGY
    ? String(plaintext)
    :
        dictionary.get(keyId + plaintext) ||
            encrypt$2({ plaintext, keyId });

async function encrypt$1(parameters) {
    return 'plaintext' in parameters
        ? kmsEncrypt(parameters)
        : Promise.all(parameters.map(kmsEncrypt));
}
async function decrypt$1(ciphertext) {
    return typeof ciphertext === 'undefined'
        ? undefined
        : typeof ciphertext === 'string'
            ? kmsDecrypt(ciphertext)
            : Promise.all(ciphertext.map(kmsDecrypt));
}

const COLUMNS = process.stdout.columns || 32;
const askQuestion = (question, prompt = '→', sensitive = false) => {
    const line = readline__namespace.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    return new Promise(resolve => line.question(`\n${question}:\n\n${prompt} `, answer => {
        line.close();
        if (sensitive) {
            readline__namespace.moveCursor(process.stdin, 0, -1);
            readline__namespace.clearLine(process.stdin, 0);
            console.log(`${prompt}  ${'*'.repeat(answer.length)}`);
        }
        resolve(answer.trim());
    }));
};
const printUsageText = () => console.info(`
Usage: aws-kms-thingy [command]

Commands:
  - encrypt       Encrypt a string with an AWS KMS key
  - decrypt       Decrypt ciphertext encrypted with AWS KMS
`);
const prettyResult = (title, text) => {
    console.log(`\n${'〰️'.repeat((COLUMNS - (title.length + 2)) / 4)} ${title} ${'〰️'.repeat((COLUMNS - (title.length + 2)) / 4)}\n`, text, `\n${'〰️'.repeat(COLUMNS / 2)}\n`);
    return text;
};
async function encrypt() {
    const keyId = process.env.AWS_KMS_KEY_ARN ||
        (await askQuestion('Please enter AWS KMS Key ARN to use'));
    const plaintext = await askQuestion('Enter plain text to encrypt', '🔓', true);
    const result = (await encrypt$1({ keyId, plaintext }));
    return prettyResult('🔐 Encrypted', result);
}
async function decrypt() {
    const ciphertext = await askQuestion('Enter ciphertext to decrypt', '🔐');
    const result = (await decrypt$1(ciphertext));
    return prettyResult('🔓 Decrypted', result);
}
async function main([, , action] = process.argv) {
    const actions = {
        decrypt,
        encrypt,
    };
    if (action && action in actions) {
        console.log(`aws-kms-thingy ${action}`);
        return actions[action]();
    }
    return printUsageText();
}
main().catch(console.error);

exports.main = main;
