import { KMS } from 'aws-sdk';

const kms$1 = new KMS();
const isBase64 = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;
const dictionary$1 = new Map();
async function decrypt$1(ciphertext) {
    const result = await kms$1
        .decrypt({ CiphertextBlob: Buffer.from(ciphertext, 'base64') })
        .promise();
    const plaintext = result.Plaintext ? result.Plaintext.toString() : ciphertext;
    return dictionary$1.set(ciphertext, plaintext) && plaintext;
}
var kmsDecrypt = async (ciphertext) => {
    var _a;
    const isEmptyString = ciphertext.length === 0;
    const decryptDisabled = ['1', 1, 'true', true].includes((_a = process.env.DISABLE_AWS_KMS_THINGY) !== null && _a !== void 0 ? _a : false);
    const isBase64Encoded = isBase64.test(ciphertext);
    if (isEmptyString || decryptDisabled || !isBase64Encoded) {
        return String(ciphertext);
    }
    const cached = dictionary$1.get(ciphertext);
    if (cached) {
        return cached;
    }
    return decrypt$1(ciphertext);
};

const kms = new KMS();
const dictionary = new Map();
async function encrypt$1({ plaintext, keyId, }) {
    const result = await kms
        .encrypt({ KeyId: keyId, Plaintext: plaintext })
        .promise();
    const ciphertext = result.CiphertextBlob
        ? result.CiphertextBlob.toString('base64')
        : plaintext;
    return dictionary.set(plaintext, ciphertext) && ciphertext;
}
var kmsEncrypt = ({ plaintext, keyId, }) => process.env.DISABLE_AWS_KMS_THINGY
    ? String(plaintext)
    :
        dictionary.get(keyId + plaintext) ||
            encrypt$1({ plaintext, keyId });

async function encrypt(parameters) {
    return 'plaintext' in parameters
        ? kmsEncrypt(parameters)
        : Promise.all(parameters.map(kmsEncrypt));
}
async function decrypt(ciphertext) {
    return typeof ciphertext === 'undefined'
        ? undefined
        : typeof ciphertext === 'string'
            ? kmsDecrypt(ciphertext)
            : Promise.all(ciphertext.map(kmsDecrypt));
}

export { decrypt, encrypt };
