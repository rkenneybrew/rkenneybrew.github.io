#!/usr/bin/env node
import * as readline from 'readline';
import * as lib from './';
const COLUMNS = process.stdout.columns || 32;
const askQuestion = (question, prompt = '→', sensitive = false) => {
    const line = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    return new Promise(resolve => line.question(`\n${question}:\n\n${prompt} `, answer => {
        line.close();
        if (sensitive) {
            readline.moveCursor(process.stdin, 0, -1);
            readline.clearLine(process.stdin, 0);
            console.log(`${prompt}  ${'*'.repeat(answer.length)}`);
        }
        resolve(answer.trim());
    }));
};
const printUsageText = () => console.info(`
Usage: aws-kms-thingy [command]

Commands:
  - encrypt       Encrypt a string with an AWS KMS key
  - decrypt       Decrypt ciphertext encrypted with AWS KMS
`);
const prettyResult = (title, text) => {
    console.log(`\n${'〰️'.repeat((COLUMNS - (title.length + 2)) / 4)} ${title} ${'〰️'.repeat((COLUMNS - (title.length + 2)) / 4)}\n`, text, `\n${'〰️'.repeat(COLUMNS / 2)}\n`);
    return text;
};
async function encrypt() {
    const keyId = process.env.AWS_KMS_KEY_ARN ||
        (await askQuestion('Please enter AWS KMS Key ARN to use'));
    const plaintext = await askQuestion('Enter plain text to encrypt', '🔓', true);
    const result = (await lib.encrypt({ keyId, plaintext }));
    return prettyResult('🔐 Encrypted', result);
}
async function decrypt() {
    const ciphertext = await askQuestion('Enter ciphertext to decrypt', '🔐');
    const result = (await lib.decrypt(ciphertext));
    return prettyResult('🔓 Decrypted', result);
}
export async function main([, , action] = process.argv) {
    const actions = {
        decrypt,
        encrypt,
    };
    if (action && action in actions) {
        console.log(`aws-kms-thingy ${action}`);
        return actions[action]();
    }
    return printUsageText();
}
main().catch(console.error);
