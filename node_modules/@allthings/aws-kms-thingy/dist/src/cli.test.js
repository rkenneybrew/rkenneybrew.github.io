import { main } from './cli';
const argvBase = [
    '/usr/local/bin/node',
    '/home/mockUser',
];
const mockDecryptedValue = 'foobar';
const mockEncryptedValue = Buffer.from(mockDecryptedValue).toString('base64');
jest.mock('readline', () => ({
    clearLine: jest.fn(),
    createInterface: () => ({
        close: jest.fn(),
        question: (questionText, callback) => callback(questionText.match('encrypted')
            ? mockEncryptedValue
            : mockDecryptedValue),
    }),
    moveCursor: jest.fn(),
}));
describe('cli', () => {
    it('should be able to encrypt a string', async () => {
        const result = await main([...argvBase, 'encrypt']);
        expect(result).toBe(mockEncryptedValue);
    });
    it('should be able to decrypt an encrypted string', async () => {
        const result = await main([...argvBase, 'decrypt']);
        expect(result).toBe(mockDecryptedValue);
    });
    it('should print usage info if no command specified', async () => {
        Object.assign(process.stdout, { columns: undefined });
        jest.resetAllMocks();
        jest.resetModules();
        const consoleSpy = jest.spyOn(console, 'info');
        const cli = require('./cli');
        const result = await cli.main();
        expect(result).toBe(undefined);
        expect(consoleSpy).toHaveBeenCalled();
        expect(consoleSpy.mock.calls[0][0]).toContain('Usage:');
    });
});
