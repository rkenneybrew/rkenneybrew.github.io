import { KMS } from 'aws-sdk';
const kms = new KMS();
const isBase64 = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;
export const dictionary = new Map();
async function decrypt(ciphertext) {
    const result = await kms
        .decrypt({ CiphertextBlob: Buffer.from(ciphertext, 'base64') })
        .promise();
    const plaintext = result.Plaintext ? result.Plaintext.toString() : ciphertext;
    return dictionary.set(ciphertext, plaintext) && plaintext;
}
export default async (ciphertext) => {
    var _a;
    const isEmptyString = ciphertext.length === 0;
    const decryptDisabled = ['1', 1, 'true', true].includes((_a = process.env.DISABLE_AWS_KMS_THINGY) !== null && _a !== void 0 ? _a : false);
    const isBase64Encoded = isBase64.test(ciphertext);
    if (isEmptyString || decryptDisabled || !isBase64Encoded) {
        return String(ciphertext);
    }
    const cached = dictionary.get(ciphertext);
    if (cached) {
        return cached;
    }
    return decrypt(ciphertext);
};
