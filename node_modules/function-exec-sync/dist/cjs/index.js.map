{"version":3,"sources":["index.ts"],"sourcesContent":["require('./polyfills.ts');\nconst fs = require('fs');\nconst path = require('path');\nconst cp = require('child_process');\nconst tmpdir = require('os').tmpdir || require('os-shim').tmpdir;\nconst suffix = require('temp-suffix');\nconst serialize = require('serialize-javascript');\nconst mkdirp = require('mkdirp');\nconst shortHash = require('short-hash');\nconst sleep = require('thread-sleep-compat');\n\nconst DEFAULT_SLEEP_MS = 100;\nconst NODES = ['node', 'node.exe', 'node.cmd'];\nconst isWindows = process.platform === 'win32';\n\n// @ts-ignore\nconst unlinkSafe = require('./unlinkSafe.ts');\n\nexport type ExecWorkerOptions = {\n  name?: string;\n  cwd?: string;\n  env?: object;\n  callbacks?: boolean;\n  execPath?: string;\n  sleep?: number;\n};\n\nexport default function functionExecSync(options: ExecWorkerOptions, filePath: string /* arguments */): any {\n  const args = Array.prototype.slice.call(arguments, 2);\n  const workerData = { filePath, args, callbacks: options.callbacks || false, env: options.env ?? process.env, cwd: options.cwd ?? process.cwd() };\n\n  const name = options.name ?? 'exec-worker-sync';\n  const temp = path.join(tmpdir(), name, shortHash(workerData.cwd));\n  const input = path.join(temp, suffix('input'));\n  const output = path.join(temp, suffix('output'));\n  const done = path.join(temp, suffix('done'));\n\n  // store data to a file\n  mkdirp.sync(path.dirname(input));\n  fs.writeFileSync(input, serialize(workerData), 'utf8');\n  unlinkSafe(output);\n\n  // call the function\n  const execPath = options.execPath || process.execPath;\n  const worker = path.join(__dirname, 'worker.js');\n\n  // only node\n  if (NODES.indexOf(path.basename(execPath).toLowerCase()) < 0) throw new Error(`Expecting node executable. Received: ${path.basename(execPath)}`);\n\n  // exec and start polling\n  if (!cp.execFileSync) {\n    const sleepMS = options.sleep ?? DEFAULT_SLEEP_MS;\n    let cmd = `\"${execPath}\" \"${worker}\" \"${input}\" \"${output}\"`;\n    cmd += `${isWindows ? '&' : ';'} echo \"done\" > ${done}`;\n    cp.exec(cmd);\n    while (!fs.existsSync(done)) {\n      sleep(sleepMS);\n    }\n  } else {\n    cp.execFileSync(execPath, [worker, input, output]);\n  }\n  unlinkSafe(input);\n  unlinkSafe(done);\n\n  // get data and clean up\n  let res;\n  try {\n    res = eval(`(${fs.readFileSync(output, 'utf8')})`);\n    unlinkSafe(output);\n  } catch (err) {\n    throw new Error(`function-exec-sync: Error: ${err.message}. Function: ${filePath}. Exec path: ${execPath}`);\n  }\n\n  // throw error from the worker\n  if (res.error) {\n    const error = new Error(res.error.message);\n    for (const key in res.error) error[key] = res.error[key];\n    throw error;\n  }\n  // return the result\n  return res.value;\n}\n"],"names":["require","functionExecSync","fs","path","cp","tmpdir","suffix","serialize","mkdirp","shortHash","sleep","DEFAULT_SLEEP_MS","NODES","isWindows","process","platform","unlinkSafe","options","filePath","args","Array","prototype","slice","call","arguments","workerData","callbacks","env","cwd","name","temp","join","input","output","done","sync","dirname","writeFileSync","execPath","worker","__dirname","indexOf","basename","toLowerCase","Error","execFileSync","sleepMS","cmd","exec","existsSync","res","eval","readFileSync","err","message","error","key","value"],"mappings":"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"}