"use strict";
const urlGlobals = require("../shared/url-globals.js"),
  uuid = require("../shared/uuid.js"),
  url = require("../shared/url.js"),
  time = require("../shared/time.js"),
  hmac = require("../shared/hmac.js"),
  api = require("./api.js");
/**
 * # P2P-счета
 * [Документация QIWI](https://developer.qiwi.com/ru/p2p-payments/#p2p-)
 *
 * @export
 * @class P2pBillsApi
 * @extends {P2pApi}
 */
class P2pBillsApi extends api.P2pApi {
  constructor() {
    super(...arguments);
    this.generateId = () => uuid.generateUUID();
  }
  /**
   * Добавляет параметры
   *
   * @param {string} payUrl
   * @param {PayUrlPatchParameters=} [options]
   * @return {string} Новый URL для оплаты
   */
  static patchPayUrl(payUrl, options = {}) {
    const url = new urlGlobals.URL(payUrl);
    if (options.paySource) url.searchParams.set("paySource", options.paySource);
    if (options.successUrl) url.searchParams.set("successUrl", options.successUrl);
    return url.toString();
  }
  /**
   *
   *
   * @private
   * @param {(BillPaySourceAny | BillPaySourceAny[])} paySourcesFilter
   * @return {string} string
   * @memberof P2pBillsApi
   */
  _resolvePaySourcesFilter(paySourcesFilter) {
    return Array.isArray(paySourcesFilter)
      ? paySourcesFilter.join(",")
      : String(paySourcesFilter);
  }
  /**
   * Нормализует сумму до строки с 2 числами после запятой
   *
   * @private
   * @param {string|number} amount Сумма
   * @return {string}
   */
  _normalizeAmount(amount) {
    if (typeof amount === "number") return amount.toFixed(2);
    return this._normalizeAmount(Number.parseFloat(amount));
  }
  /**
   * ### Выставление счета
   *
   * **По оплаченным счетам возврат денежных средств не предусмотрен.**
   *
   * Доступно выставление счетов в рублях и тенге.
   * Надежный способ для интеграции. Параметры передаются
   * server2server с использованием авторизации. Метод позволяет
   * выставить счет: при успешном выполнении запроса в ответе
   * вернется параметр `payUrl` - ссылка для редиректа
   * пользователя на форму.
   *
   * [Настройки формы и счета](https://developer.qiwi.com/ru/p2p-payments/#option)
   *
   * **Для тестирования и отладки сервиса рекомендуем выставлять и оплачивать счета суммой 1 рубль.**
   *
   * @param {BillCreateParameters} data
   * @return {Promise<BillStatusData>} Promise<BillStatusData>
   * @memberof P2pBillsApi
   */
  async create(data) {
    var _a;
    const {
      paySource,
      successUrl,
      billId = this.generateId(),
      themeCode,
      expirationDateTime = time.formatOffsetDate(15, "min"),
      paySourcesFilter,
      ...bill
    } = data;
    const customFields =
      (_a = bill.customFields) !== null && _a !== void 0 ? _a : {};
    if (themeCode) customFields.themeCode = themeCode;
    if (paySourcesFilter) {
      customFields.paySourcesFilter =
        this._resolvePaySourcesFilter(paySourcesFilter);
    }
    const patchedBill = {
      ...bill,
      expirationDateTime,
      customFields,
      amount: {
        currency: bill.amount.currency,
        value: this._normalizeAmount(bill.amount.value)
      }
    };
    const result = await this.http.put(url.url`${billId}`(), patchedBill);
    result.payUrl = P2pBillsApi.patchPayUrl(result.payUrl, {
      paySource,
      successUrl
    });
    return result;
  }
  /**
   * ### Проверка статуса перевода по счету
   *
   * Метод позволяет проверить статус перевода по счету. Рекомендуется
   * его использовать после получения уведомления о переводе.
   *
   * @param {string} billId Уникальный идентификатор счета в вашей системе.
   * @return {Promise<BillStatusData>} Объект счёта
   */
  async getStatus(billId) {
    return await this.http.get(url.url`${billId}`());
  }
  /**
   * ### Отмена неоплаченного счета
   *
   * Метод позволяет отменить счет, по которому не был выполнен перевод.
   *
   * @param {string} billId Уникальный идентификатор счета в вашей системе.
   * @return {Promise<BillStatusData>} Объект счёта
   */
  async reject(billId) {
    return await this.http.post(url.url`${billId}/reject`());
  }
  /**
   *
   *
   * @param {string} signature
   * @param {(BillStatusNotificationBody | BillStatusBody | BillStatusBody)} body
   * @param {*} [merchantSecret=this.secretKey]
   * @return {*} boolean
   * @memberof P2pBillsApi
   */
  checkNotificationSignature(signature, body, merchantSecret = this.secretKey) {
    if ("bill" in body) body = body.bill;
    return hmac.compareQiwiHmac(merchantSecret, signature, [
      body.amount.currency,
      body.amount.value.toString(),
      body.billId,
      body.siteId,
      body.status.value
    ]);
  }
  /**
   *  Создаёт ссылку оплаты счёта без запроса к API
   *
   * @param {BillFormParams} parameters GET-параметры ссылки
   *
   * @return {string} Ссылка на оплату счёта
   */
  createFormUrl(parameters) {
    const {
      lifetime = time.formatOffsetAltLifetimeDate(15, "min"),
      themeCode,
      customFields = {},
      billId = this.generateId(),
      paySourcesFilter,
      ...bill
    } = parameters;
    if (themeCode) customFields.themeCode = themeCode;
    if (paySourcesFilter) {
      customFields.paySourcesFilter =
        this._resolvePaySourcesFilter(paySourcesFilter);
    }
    const options = {
      ...bill,
      billId,
      lifetime,
      amount: this._normalizeAmount(parameters.amount),
      publicKey: this.publicKey,
      customFields
    };
    return url.url`https://oplata.qiwi.com/create`(options);
  }
  /**
   *
   * @deprecated API заархивировано
   * @param {string} billId
   * @param {RefundCreationRequest} options
   * @return {Promise<BillRefundStatusData>} Promise<BillRefundStatusData>
   * @memberof P2pBillsApi
   */
  async refund(billId, options) {
    const { refundId = this.generateId(), amount } = options;
    amount.value = this._normalizeAmount(amount.value);
    return await this.http.put(url.url`${billId}/refunds/${refundId}`());
  }
  /**
   *
   * @deprecated API заархивировано
   * @param {string} billId
   * @param {string} refundId
   * @return {Promise<BillRefundStatusData>} Promise<BillRefundStatusData>
   * @memberof P2pBillsApi
   */
  async getRefundStatus(billId, refundId) {
    return await this.http.get(url.url`${billId}/refunds/${refundId}`());
  }
}
exports.P2pBillsApi = P2pBillsApi;
