import type { Request, RequestHandler } from "express";
import type { AnyParameters } from "../shared";
import type { P2pBillsApi } from "./bills.api";
import type { BillStatusNotificationBody } from "./p2p.types";
type Promisify<T> = T extends Promise<any> ? T : Promise<T>;
type AnyCallableFunction = (...parameters: AnyParameters) => unknown;
type PromisifyReturnType<T extends AnyCallableFunction> = Promisify<ReturnType<T>>;
type PromiseWrappedFunction<T extends AnyCallableFunction> = (...parameters: Parameters<T>) => PromisifyReturnType<T>;
/**
 * @template {AnyCallableFunction} T
 *
 * @param {T} callable
 * @return {PromiseWrappedFunction<T>}
 */
export declare function promise<T extends AnyCallableFunction>(callable: T): PromiseWrappedFunction<T>;
/**
 *
 *
 * @template T
 * @param {Request} request
 * @return {Promise<T>} Promise<T>
 */
export declare function parseJsonRequestBody<T>(request: Request): Promise<T>;
export type BillRequestHandler = RequestHandler<Record<string, string>, any, BillStatusNotificationBody>;
export type MiddlewareOptions = {
    memo?: boolean;
    memoTime?: number;
};
/**
 *
 *
 * @param {(string | string[] | undefined)} value
 * @return {string} string
 */
export declare function resolveHeaderValue(value?: string | string[] | undefined): string;
/**
 *
 *
 * @export
 * @param {P2pBillsApi} bills
 * @param {MiddlewareOptions} [options={}]
 * @param {BillRequestHandler} [handler]
 * @return {BillRequestHandler} BillRequestHandler
 */
export declare function createP2pNotificationMiddleware(bills: P2pBillsApi, options?: MiddlewareOptions, handler?: BillRequestHandler): BillRequestHandler;
export {};
