import { ApiClass } from "../api.mjs";
import { environment } from "../shared/environment.mjs";
import { SimpleJsonHttp } from "../shared/http.mjs";
import { url } from "../shared/url.mjs";
import { USER_AGENT } from "../shared/identity.mjs";
import { P2pBillsApi } from "./bills.api.mjs";
import { mapHttpErrors } from "./p2p.errors.mjs";
import { createP2pNotificationMiddleware } from "./p2p.middleware.mjs";
import { BillCurrency, BillPaySource, BillStatus } from "./p2p.types.mjs";
/**
 * # P2P-счета
 * [Документация QIWI](https://developer.qiwi.com/ru/p2p-payments/)
 *
 * @export
 * @class P2p
 */
class P2p extends ApiClass {
  /**
   *
   *
   * @static
   * @param {string} secretKey
   * @param {string} [publicKey=""]
   * @return {P2p} P2p
   * @memberof P2p
   */
  static create(secretKey, publicKey = "") {
    return new this({
      http: this.httpClientFactory(secretKey),
      publicKey,
      secretKey
    });
  }
  /**
   *
   *
   * @static
   * @param {string} [secretKey=process.env.QIWI_SECRET_KEY]
   * @param {string} [publicKey=process.env.QIWI_PUBLIC_KEY]
   * @return {P2p} P2p
   * @memberof P2p
   */
  static env(
    secretKey = environment.QIWI_SECRET_KEY,
    publicKey = environment.QIWI_PUBLIC_KEY
  ) {
    return this.create(secretKey, publicKey);
  }
  /**
   * Creates an instance of P2p.
   * @param {P2pApiOptions} [options]
   * @memberof P2p
   */
  constructor({
    publicKey = "",
    secretKey = "",
    http = P2p.httpClientFactory(secretKey)
  } = {}) {
    super({ publicKey, secretKey, http });
    this.bills = new P2p.BillsApi(this._options);
  }
  /**
   * `[Экспериментально]` Упрощает интеграцию с `express`
   *
   * ## Это middleware кидает ошибки, позаботьтесь об их обработке
   *
   * @param {Object} [options] Параметры обработки запроса
   * @param {boolean} [options.memo=true] Флаг для включения/отключения пропуска повторяющихся запросов, если один из них был успешно обработан
   *
   * @param {RequestHandler<Record<string, string>, any, BillStatusNotificationBody>} handler
   *
   * @return {RequestHandler}
   *
   * ##### Пример:
   * **В начале файла**
   * ```js
   * const p2p = new QIWI.P2P(process.env.QIWI_PRIVATE_KEY);
   * ```
   * *`Вариант 1 - Классический`*
   *
   * ```js
   * app.post('/webhook/qiwi', p2p.notificationMiddleware(), (req, res) => {
   *  req.body // Это `BillStatusNotificationBody`
   * })
   * ```
   *
   * *`Вариант 2 - Если нужны подсказки типов`*
   *
   * ```js
   * app.post('/webhook/qiwi', p2p.notificationMiddleware({}, (req, res) => {
   *  req.body // Это `BillStatusNotificationBody`
   * }))
   * ```
   *
   * **Обработка ошибок**
   * ```js
   * app.use((error, request, response, next) => {
   *  console.log(error); // [Error: Notification signature mismatch]
   * })
   * ```
   */
  notificationMiddleware(options = {}, handler) {
    return createP2pNotificationMiddleware(this.bills, options, handler);
  }
}
P2p.BillsApi = P2pBillsApi;
P2p.BillCurrency = BillCurrency;
P2p.BillPaySource = BillPaySource;
P2p.BillStatus = BillStatus;
P2p.Currency = BillCurrency;
P2p.PaySource = BillPaySource;
P2p.Status = BillStatus;
/**
 *
 *
 * @static
 * @param {string} secretKey
 * @return {SimpleJsonHttp} SimpleJsonHttp
 * @memberof P2p
 */
P2p.httpClientFactory = (secretKey) => {
  const http = new SimpleJsonHttp();
  http.client.options = {
    ...http.client.options,
    baseURL: url`https://api.qiwi.com/partner/bill/v1/bills/`(),
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json",
      "User-Agent": USER_AGENT,
      Authorization: `Bearer ${secretKey}`
    },
    okStatusCodes: [200],
    timeout: 10000,
    mapHttpErrors
  };
  return http;
};
export { P2p };
