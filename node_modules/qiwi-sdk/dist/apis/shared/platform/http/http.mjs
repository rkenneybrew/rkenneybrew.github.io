import { OptionsWrapperWithSetter } from "../../../options-wrapper.mjs";
import { collect } from "../../collect.mjs";
import { HttpError } from "../../http.types.mjs";
import { _ } from "../../pass.mjs";
import axios from "axios";
/**
 *
 *
 * @export
 * @class AxiosHttpClient
 * @extends {OptionsWrapperWithSetter<HttpClientOptions>}
 * @implements {HttpClient}
 */
class AxiosHttpClient extends OptionsWrapperWithSetter {
  constructor() {
    super(...arguments);
    /**
     *
     *
     * @protected
     * @memberof AxiosHttpClient
     */
    this._axios = axios.create();
  }
  /**
   *
   *
   * @param {HttpRequestOptions} options
   * @return {Promise<HttpResponse>}
   * @memberof AxiosHttpClient
   */
  async request(options) {
    var _a;
    const request = {
      ...this.options,
      ...options,
      headers: { ...this.options.headers, ...options.headers }
    };
    const okStatusCodes = new Set(
      request.okStatusCodes ? collect(request.okStatusCodes) : []
    );
    const validateStatus = (status) =>
      okStatusCodes.size === 0 ? true : okStatusCodes.has(status);
    try {
      const axiosResponse = await this._axios
        .request({
          httpAgent: request.agent,
          httpsAgent: request.agent,
          baseURL: request.baseURL,
          timeout: request.timeout,
          url: request.url,
          method: request.method,
          headers: { ...request.headers },
          responseType: "arraybuffer",
          data: request.body
            ? ((_a = request.stringifyBody) !== null && _a !== void 0 ? _a : _)(
                request.body
              )
            : undefined,
          validateStatus
        })
        .catch((error) => {
          if (axios.isAxiosError(error) && error.response) {
            throw new HttpError(
              error.message,
              this._mapResponse(error.response, request)
            );
          }
          throw error;
        });
      return this._mapResponse(axiosResponse, request);
    } catch (error) {
      if (
        typeof request.mapHttpErrors === "function" &&
        error instanceof HttpError
      ) {
        throw request.mapHttpErrors(error);
      }
      throw error;
    }
  }
  /**
   *
   *
   * @protected
   * @param {AxiosResponse} axiosResponse
   * @param {HttpRequestOptions} request
   * @return {HttpResponse} HttpResponse
   * @memberof AxiosHttpClient
   */
  _mapResponse(axiosResponse, request) {
    var _a;
    const { headers, status: statusCode } = axiosResponse;
    const data =
      axiosResponse.data instanceof ArrayBuffer ||
      axiosResponse.data instanceof Uint8Array
        ? new Uint8Array(axiosResponse.data)
        : new Uint8Array();
    let body;
    try {
      body = ((_a = request.parseResponse) !== null && _a !== void 0 ? _a : _)(data);
    } catch (_b) {
      body = data;
    }
    return {
      headers: headers,
      statusCode,
      body,
      request
    };
  }
}
export { AxiosHttpClient };
