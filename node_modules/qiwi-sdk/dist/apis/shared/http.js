"use strict";
const http = require("./platform/http/http.js"),
  decode = require("./platform/decode/decode.js");
/**
 *
 *
 * @export
 * @class SimpleJsonHttp
 */
class SimpleJsonHttp {
  /**
   * Creates an instance of SimpleJsonHttp.
   * @param {HttpClient} client
   * @memberof SimpleJsonHttp
   */
  constructor(
    client = new http.AxiosHttpClient({
      parseResponse: (body) => JSON.parse(decode.uint8ArrayToUtf8(body)),
      stringifyBody: (body) => JSON.stringify(body)
    })
  ) {
    this.client = client;
  }
  /**
   *
   *
   * @template T
   * @param {string} url
   * @return {Promise<T>}
   * @memberof SimpleJsonHttp
   */
  async get(url) {
    return await this.simpleRequest("GET", url.toString());
  }
  /**
   *
   *
   * @template T
   * @param {string} url
   * @param {*} [body]
   * @return {Promise<T>}
   * @memberof SimpleJsonHttp
   */
  async post(url, body) {
    return await this.simpleRequest("POST", url.toString(), body);
  }
  /**
   *
   *
   * @template T
   * @param {string} url
   * @param {*} [body]
   * @return {Promise<T>}
   * @memberof SimpleJsonHttp
   */
  async put(url, body) {
    return await this.simpleRequest("PUT", url.toString(), body);
  }
  /**
   *
   *
   * @template T
   * @param {string} url
   * @param {*} [body]
   * @return {Promise<T>}
   * @memberof SimpleJsonHttp
   */
  async patch(url, body) {
    return await this.simpleRequest("PATCH", url.toString(), body);
  }
  /**
   *
   *
   * @template T
   * @param {string} url
   * @param {*} [body]
   * @return {Promise<T>}
   * @memberof SimpleJsonHttp
   */
  async delete(url, body) {
    return await this.simpleRequest("DELETE", url.toString(), body);
  }
  /**
   *
   * @template T
   * @param {string} method
   * @param {string} url
   * @param {*} [body]
   * @return {Promise<T>} Promise<T>
   * @memberof SimpleJsonHttp
   */
  async simpleRequest(method, url, body) {
    return await this.request({ method, url, body });
  }
  /**
   *
   * @template T
   * @param {HttpRequestOptions} option
   * @return {Promise<T>} Promise<T>
   * @memberof SimpleJsonHttp
   */
  async request(option) {
    return await this.client.request(option).then((response) => response.body);
  }
}
exports.SimpleJsonHttp = SimpleJsonHttp;
