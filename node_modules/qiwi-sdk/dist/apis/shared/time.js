"use strict";
const get = require("./get.js");
/**
 * Форматирует дату в понятную для QIWI строку:
 *
 * `ГГГГ-ММ-ДДTЧЧ:ММ:СС+\-ЧЧ:ММ`
 *
 * @param {DateValue} dateTime Аргумент для конструктора
 * @return {string}
 */
function formatDate(dateTime) {
  const date = new Date(dateTime);
  const base = date.toISOString().split(".")[0];
  return `${base}+00:00`;
}
/**
 * **Используется только для параметра `lifetime` при создании ссылки на форму оплаты**
 *
 * Форматирует дату в понятную для QIWI строку:
 *
 * `ГГГГ-ММ-ДДTччмм`
 *
 * @export
 * @param {DateValue} dateTime
 * @return {string} string
 */
function formatAltLifetimeDate(dateTime) {
  const date = new Date(dateTime);
  const base = date.toISOString().split("T")[0];
  const time =
    date.getHours().toString().padStart(2, "0") +
    date.getMinutes().toString().padStart(2, "0");
  return `${base}T${time}`;
}
exports.TimeSpan = void 0;
(function (TimeSpan) {
  TimeSpan[(TimeSpan["Millisecond"] = 1)] = "Millisecond";
  TimeSpan[(TimeSpan["Second"] = 1000)] = "Second";
  TimeSpan[(TimeSpan["Minute"] = 60000)] = "Minute";
  TimeSpan[(TimeSpan["Hour"] = 3600000)] = "Hour";
  TimeSpan[(TimeSpan["Day"] = 86400000)] = "Day";
  TimeSpan[(TimeSpan["Week"] = 604800000)] = "Week";
  TimeSpan[(TimeSpan["Month"] = 2592000000)] = "Month";
  TimeSpan[(TimeSpan["Year"] = 31536000000)] = "Year";
})(exports.TimeSpan || (exports.TimeSpan = {}));
const TimeSpanMapping = Object.freeze({
  ms: exports.TimeSpan.Millisecond,
  msec: exports.TimeSpan.Millisecond,
  millisecond: exports.TimeSpan.Millisecond,
  s: exports.TimeSpan.Second,
  sec: exports.TimeSpan.Second,
  second: exports.TimeSpan.Second,
  m: exports.TimeSpan.Minute,
  min: exports.TimeSpan.Minute,
  minute: exports.TimeSpan.Minute,
  h: exports.TimeSpan.Hour,
  hr: exports.TimeSpan.Hour,
  hour: exports.TimeSpan.Hour,
  d: exports.TimeSpan.Day,
  day: exports.TimeSpan.Day,
  w: exports.TimeSpan.Week,
  week: exports.TimeSpan.Week,
  mn: exports.TimeSpan.Month,
  mon: exports.TimeSpan.Month,
  month: exports.TimeSpan.Month,
  y: exports.TimeSpan.Year,
  yr: exports.TimeSpan.Year,
  year: exports.TimeSpan.Year
});
/**
 *
 *
 * @param {number} amount
 * @param {TimeUnit} unit
 * @param {Date} currentDate
 * @return {Date}
 */
function offsetDate(amount, unit, currentDate) {
  const date = new Date(currentDate);
  if (typeof unit !== "number") {
    unit = get.getOwnProperty(TimeSpanMapping, unit);
  }
  const time = Math.round(date.getTime() + amount * unit);
  date.setTime(time);
  return date;
}
/**
 * **Используется только для параметра `lifetime` при создании ссылки на форму оплаты**
 *
 * Форматирует дату в понятную для QIWI строку:
 *
 * `ГГГГ-ММ-ДДTччмм`
 *
 * @export
 * @param {number} amount
 * @param {(TimeSpan | number | TimeSpanKeys)} unit
 * @param {Date} [currentDate=new Date()]
 * @return {string} string
 */
function formatOffsetDate(
  amount,
  unit = exports.TimeSpan.Millisecond,
  currentDate = new Date()
) {
  return formatDate(offsetDate(amount, unit, currentDate));
}
/**
 *
 *
 * @export
 * @param {number} amount
 * @param {(TimeSpan | number | TimeSpanKeys)} unit
 * @param {Date} [currentDate=new Date()]
 * @return {string} string
 */
function formatOffsetAltLifetimeDate(
  amount,
  unit = exports.TimeSpan.Millisecond,
  currentDate = new Date()
) {
  return formatAltLifetimeDate(offsetDate(amount, unit, currentDate));
}
exports.TimeSpanMapping = TimeSpanMapping;
exports.formatAltLifetimeDate = formatAltLifetimeDate;
exports.formatDate = formatDate;
exports.formatOffsetAltLifetimeDate = formatOffsetAltLifetimeDate;
exports.formatOffsetDate = formatOffsetDate;
