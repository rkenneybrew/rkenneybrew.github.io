import { ExtendedError } from "../error.mjs";
import { HttpError } from "../shared/http.types.mjs";
/**
 *
 *
 * @export
 * @class WalletApiError
 * @extends {ExtendedError}
 */
class WalletApiError extends ExtendedError {
  /**
   * Creates an instance of WalletApiError.
   * @param {WalletApiErrorResponse} response
   * @param {HttpError} [cause]
   * @memberof WalletApiError
   */
  constructor(response, cause) {
    super(response.userMessage, cause);
    this.response = response;
    this.dateTime = new Date(this.response.dateTime);
    this.serviceName = this.response.serviceName;
  }
}
/**
 *
 *
 * @export
 * @class WalletApiShortError
 * @extends {ExtendedError}
 */
class WalletApiShortError extends ExtendedError {
  /**
   * Creates an instance of WalletApiShortError.
   * @param {WalletApiShortErrorResponse} response
   * @param {HttpError} [cause]
   * @memberof WalletApiShortError
   */
  constructor(response, cause) {
    super(response.message, cause);
    this.response = response;
    this.code = this.response.code;
  }
}
/**
 *
 *
 * @export
 * @class WalletAuthorizationError
 * @extends {ExtendedError}
 */
class WalletAuthorizationError extends ExtendedError {
  /**
   * Creates an instance of WalletAuthorizationError.
   * @memberof WalletAuthorizationError
   */
  constructor(cause) {
    super("Unauthorized api request", cause);
    this.cause = cause;
  }
}
/**
 *
 *
 * @export
 * @param {HttpError} error
 * @return {*}
 */
function mapHttpErrors(error) {
  var _a, _b;
  if (!(error instanceof HttpError)) return error;
  const response = error.response;
  if (response.statusCode === 401) {
    return new WalletAuthorizationError(error);
  }
  if ((_a = response.body) === null || _a === void 0 ? void 0 : _a.description) {
    return new WalletApiError(response.body, error);
  }
  if ((_b = response.body) === null || _b === void 0 ? void 0 : _b.code) {
    return new WalletApiShortError(response.body, error);
  }
  return error;
}
export {
  WalletApiError,
  WalletApiShortError,
  WalletAuthorizationError,
  mapHttpErrors
};
