"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Job = void 0;
const step_1 = require("./step");
class Job {
    constructor(name, data) {
        this.name = name;
        this.data = data;
    }
    get title() {
        return `job ${this.name}`;
    }
    get runsOn() {
        return this.data["runs-on"];
    }
    set runsOn(value) {
        this.data["runs-on"] = value;
    }
    get strategy() {
        return this.data.strategy;
    }
    set strategy(value) {
        if (value)
            this.data.strategy = value;
        else
            delete this.data.strategy;
    }
    get runsIf() {
        return this.data.if;
    }
    set runsIf(value) {
        if (value)
            this.data.if = value;
        else
            delete this.data.if;
    }
    get env() {
        return this.data.env;
    }
    set env(value) {
        if (value)
            this.data.env = value;
        else
            delete this.data.env;
    }
    get steps() {
        return this.data.steps.map(data => new step_1.Step(data));
    }
    set steps(value) {
        this.data.steps = value.map(step => step.data);
    }
    mergeSteps(newSteps) {
        const result = [];
        const localSteps = this.steps;
        newSteps.reverse().forEach(newStep => {
            const localStepIndex = newStep.findIndex(localSteps);
            if (localStepIndex < 0)
                return result.push(newStep);
            const [localStep, ...followSteps] = localSteps.splice(localStepIndex);
            result.push(...followSteps.reverse().filter(step => !step.isManaged()));
            if (!localStep.isManaged())
                return result.push(localStep);
            result.push(newStep);
        });
        result.push(...localSteps.reverse().filter(step => !step.isManaged()));
        return result.reverse();
    }
    clone() {
        const newData = JSON.parse(JSON.stringify(this.data));
        return new Job(this.name, newData);
    }
}
exports.Job = Job;
