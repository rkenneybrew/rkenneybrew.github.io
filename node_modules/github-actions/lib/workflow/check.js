"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Check = void 0;
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("./../utils");
const job_1 = require("./job");
const step_1 = require("./step");
class Check {
    constructor(item, action, force = false, oldValue = null, newValue = null) {
        this.action = action;
        this.item = item;
        this.force = force;
        this._oldValue = oldValue;
        this._newValue = newValue;
    }
    static _dumpValue(value) {
        if (typeof value === "string")
            return value;
        if (value === null)
            return "";
        if (value instanceof job_1.Job)
            return utils_1.yamlDump({ [value.name]: value.data });
        if (value instanceof step_1.Step)
            return utils_1.yamlDump(value.data);
        return utils_1.yamlDump(value);
    }
    get oldValue() {
        return Check._dumpValue(this._oldValue);
    }
    get newValue() {
        return Check._dumpValue(this._newValue);
    }
    get color() {
        return ({
            added: chalk_1.default.green,
            updated: chalk_1.default.blue,
            error: chalk_1.default.red,
            deleted: chalk_1.default.yellow
        }[this.action] || chalk_1.default.grey);
    }
    getTitle() {
        if (this.item === "step") {
            if (this._oldValue instanceof step_1.Step) {
                return this._oldValue.title;
            }
            if (this._newValue instanceof step_1.Step) {
                return this._newValue.title;
            }
            return new step_1.Step({}).title;
        }
        if (this.item === "job") {
            if (this._oldValue instanceof job_1.Job) {
                return this._oldValue.title;
            }
            if (this._newValue instanceof job_1.Job) {
                return this._newValue.title;
            }
            return this.item;
        }
        return this.item;
    }
    getcheckMessage(verb) {
        const prefix = `${this.icon}  ${chalk_1.default.bold(this.getTitle())}`;
        if (this.action === "up to date")
            return `${prefix} is up to date`;
        if (this.action === "error")
            return `${this.icon}  ${this.oldValue}`;
        verb = verb ? `${verb} ` : "";
        const message = `${prefix} ${verb}${chalk_1.default.bold(this.action)}`;
        if (this.action === "kept")
            return `${message}, because it is not managed`;
        return message;
    }
    get checkMessage() {
        return this.getcheckMessage("will be");
    }
    get noForceMessage() {
        return `${this.icon}  ${chalk_1.default.bold(this.getTitle())} can be ${this.action}, use ${chalk_1.default.bold("--force")} flag to apply`;
    }
    get updateMessage() {
        return this.getcheckMessage("");
    }
    get icon() {
        return ({
            updated: "↻",
            deleted: "✖",
            error: "✗",
            added: "✎"
        }[this.action] || "✓");
    }
    isApplied(force) {
        if (this.isError())
            return false;
        if (!force && this.force)
            return false;
        if (this.action == "equal" || this.action == "kept")
            return false;
        return true;
    }
    isError() {
        return this.action === "error";
    }
}
exports.Check = Check;
