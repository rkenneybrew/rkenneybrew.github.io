"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workflow = void 0;
const js_yaml_1 = __importDefault(require("js-yaml"));
const job_1 = require("./job");
class Workflow {
    constructor(data, commentLines) {
        this.data = data;
        this.commentLines = commentLines;
    }
    get name() {
        return this.data.name;
    }
    set name(value) {
        this.data.name = value;
    }
    get triggers() {
        return this.data.on;
    }
    set triggers(value) {
        this.data.on = value;
    }
    get jobNames() {
        return Object.keys(this.data.jobs || {});
    }
    get jobs() {
        return this.jobNames.map(name => this.getJob(name));
    }
    getJob(name) {
        var _a;
        const data = (_a = this.data.jobs) === null || _a === void 0 ? void 0 : _a[name];
        if (!data)
            throw new Error(`Job ${name} not found`);
        return new job_1.Job(name, data);
    }
    setJob(job) {
        if (!this.data.jobs)
            this.data.jobs = {};
        this.data.jobs[job.name] = job.data;
    }
    deleteJob(name) {
        var _a;
        (_a = this.data.jobs) === null || _a === void 0 ? true : delete _a[name];
    }
    render() {
        const comment = this.commentLines
            .map(line => (line ? `# ${line}` : "#"))
            .join("\n");
        const body = js_yaml_1.default.dump(this.data, {
            lineWidth: 999,
            quotingType: '"'
        });
        return [comment, body].filter(x => x).join("\n\n");
    }
    static fromString(content) {
        const data = js_yaml_1.default.load(content);
        const commentLines = content
            .split(/\r?\n/)
            .filter(line => line.startsWith("# ") || line === "#")
            .map(line => line.substr(2));
        return new Workflow(data, commentLines);
    }
    clone() {
        const newData = JSON.parse(JSON.stringify(this.data));
        return new Workflow(newData, [...this.commentLines]);
    }
}
exports.Workflow = Workflow;
