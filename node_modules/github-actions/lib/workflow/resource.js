"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowResource = void 0;
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const constants_1 = require("../constants");
const urlUtils_1 = require("../urlUtils");
const workflow_1 = require("./workflow");
class WorkflowResource {
    constructor(url, workflowsPath) {
        this._local = null;
        this._remote = null;
        this.url = url;
        this.name = path_1.default.parse(url).name;
        this.path = path_1.default.join(workflowsPath, this.fileName);
    }
    get title() {
        if (this._local)
            return this._local.name;
        if (this._remote)
            return this._remote.name;
        return this.name;
    }
    getTitle(action = "in", color = chalk_1.default.blue) {
        return `${color(this.title)} ${chalk_1.default.grey(`${action} ${this.path}`)}`;
    }
    get fileName() {
        return `${this.name}.yml`;
    }
    existsLocally() {
        return fs_1.default.existsSync(this.path);
    }
    getLocal() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._local)
                return this._local;
            if (!this.existsLocally())
                null;
            const result = yield util_1.promisify(fs_1.default.readFile)(this.path, {
                encoding: constants_1.UTF8
            });
            this._local = workflow_1.Workflow.fromString(result);
            return this._local;
        });
    }
    setLocal(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return util_1.promisify(fs_1.default.writeFile)(this.path, data, {
                encoding: constants_1.UTF8
            });
        });
    }
    reset() {
        this._local = null;
        this._remote = null;
    }
    getRemote() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._remote)
                return this._remote;
            const content = yield urlUtils_1.download(this.url);
            this._remote = workflow_1.Workflow.fromString(content);
            this._remote.jobs.forEach(job => job.steps.map(step => step.makeManaged()));
            return this._remote;
        });
    }
    getRemoteCached() {
        if (this._remote)
            return this._remote;
        throw new Error("Remote workflow is not cached yet");
    }
}
exports.WorkflowResource = WorkflowResource;
