"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Step = void 0;
const deep_equal_1 = __importDefault(require("deep-equal"));
class Step {
    constructor(data) {
        this.data = data;
    }
    get id() {
        return this.data.id || null;
    }
    get name() {
        return this.data.name || this.id || null;
    }
    get uses() {
        return this.data.uses ? this.data.uses.split("@")[0] : null;
    }
    get title() {
        if (this.name)
            return `step ${this.name}`;
        return "unnamed step";
    }
    isManaged() {
        var _a, _b;
        if ((_a = this.data.with) === null || _a === void 0 ? void 0 : _a["github-actions-managed"])
            return true;
        if (this.data.run) {
            const lines = this.data.run.split(/\r?\n/).map(x => x.trim());
            if (lines.includes("# github-actions-managed: true"))
                return true;
        }
        if ((_b = this.data.with) === null || _b === void 0 ? void 0 : _b.script) {
            const lines = this.data.with.script
                .split(/\r?\n/)
                .map(x => x.trim());
            if (lines.includes("// github-actions-managed: true"))
                return true;
        }
        return false;
    }
    makeNonManaged() {
        var _a, _b;
        if (!this.isManaged())
            return this;
        if (this.data.run &&
            this.data.run.includes("# github-actions-managed: true")) {
            const lines = this.data.run
                .split(/\r?\n/)
                .filter((l, i) => i || l.trim())
                .filter(l => l.trim() !== "# github-actions-managed: true");
            this.data.run = lines.join("\n");
        }
        if (((_a = this.data.with) === null || _a === void 0 ? void 0 : _a.script) &&
            this.data.with.script.includes("// github-actions-managed: true")) {
            const lines = this.data.with.script
                .split(/\r?\n/)
                .filter((l, i) => i || l.trim())
                .filter(l => l.trim() !== "// github-actions-managed: true");
            this.data.with.script = lines.join("\n");
        }
        if ((_b = this.data.with) === null || _b === void 0 ? void 0 : _b["github-actions-managed"]) {
            delete this.data.with["github-actions-managed"];
            if (Object.keys(this.data.with).length === 0) {
                delete this.data.with;
            }
        }
        return this;
    }
    makeManaged() {
        var _a, _b;
        if (this.isManaged())
            return this;
        if (this.data.run) {
            if (this.data.run.includes("\n")) {
                const lines = [
                    "# github-actions-managed: true",
                    ...this.data.run
                        .split(/\r?\n/)
                        .filter((l, i) => i || l.trim())
                ];
                this.data.run = lines.join("\n");
            }
            else {
                this.data.run = `# github-actions-managed: true\n${this.data.run}`;
            }
            return this;
        }
        if ((_a = this.data.with) === null || _a === void 0 ? void 0 : _a.script) {
            if (this.data.with.script.includes("\n")) {
                const lines = [
                    "// github-actions-managed: true",
                    ...this.data.with.script
                        .split(/\r?\n/)
                        .filter((l, i) => i || l.trim())
                ];
                this.data.with.script = lines.join("\n");
            }
            else {
                this.data.with.script = `// github-actions-managed: true\n${this.data.with.script}`;
            }
            return this;
        }
        if (((_b = this.data.with) === null || _b === void 0 ? void 0 : _b["github-actions-managed"]) !== undefined) {
            this.data.with["github-actions-managed"] = true;
            return this;
        }
        this.data.with = Object.assign({ "github-actions-managed": true }, (this.data.with || {}));
        return this;
    }
    isSame(step) {
        if (this.id && step.id)
            return this.id === step.id;
        if (this.name && step.name)
            return this.name === step.name;
        if (this.uses && step.uses)
            return this.uses === step.uses;
        return this.clone()
            .makeNonManaged()
            .equals(step.clone().makeNonManaged());
    }
    equals(step) {
        return deep_equal_1.default(this.data, step.data);
    }
    findIndex(steps) {
        for (let i = 0; i < steps.length; i++) {
            if (this.isSame(steps[i]))
                return i;
        }
        return -1;
    }
    clone() {
        const newData = JSON.parse(JSON.stringify(this.data));
        return new Step(newData);
    }
}
exports.Step = Step;
