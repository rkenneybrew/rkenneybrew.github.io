"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listWorkflowURLs = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const path_1 = __importDefault(require("path"));
const url_1 = require("url");
function api(hostname, endpoint, token) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield node_fetch_1.default(`https://api.${hostname}/repos/${endpoint}`, {
            headers: token
                ? {
                    Authorization: `Bearer ${token}`
                }
                : undefined
        });
        const result = yield response.json();
        if (result.message === "Not Found") {
            return [];
        }
        if (result.message) {
            throw new Error(result.message);
        }
        return result;
    });
}
function listFiles(hostname, user, repository, ref, directory, token) {
    return __awaiter(this, void 0, void 0, function* () {
        const contents = (yield api(hostname, `${user}/${repository}/contents/${directory}?ref=${ref}`, token));
        return contents
            .filter(item => item.type === "file")
            .map(item => item.download_url);
    });
}
function listWorkflowURLs(url) {
    return __awaiter(this, void 0, void 0, function* () {
        const parsedURL = new url_1.URL(url);
        const [, user, repo, , ref, ...directories] = parsedURL.pathname.split("/");
        return yield listFiles(parsedURL.hostname, user, repo, ref, path_1.default.join(...directories));
    });
}
exports.listWorkflowURLs = listWorkflowURLs;
