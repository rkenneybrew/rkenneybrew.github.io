"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runUpdateAll = exports.runUpdate = exports.logUpdate = void 0;
const chalk_1 = __importDefault(require("chalk"));
const differ_1 = require("./differ");
const runCheck_1 = require("./runCheck");
const merger_1 = require("./workflow/merger");
function logUpdate(check, forceUpdate = false, showDiff = false) {
    if (check.action === "equal")
        return;
    if (!forceUpdate && check.force) {
        return console.log(chalk_1.default.grey(`  ${check.noForceMessage}`));
    }
    console.log(check.color(`  ${check.updateMessage}`));
    if (showDiff)
        differ_1.logDiff(check.oldValue, check.newValue);
}
exports.logUpdate = logUpdate;
function runUpdate(workflowItem, forceUpdate, removeMarker) {
    return __awaiter(this, void 0, void 0, function* () {
        const remoteWorkflow = yield workflowItem.getRemote();
        if (!workflowItem.existsLocally()) {
            remoteWorkflow.jobs.forEach(job => job.steps.forEach(step => step.makeManaged()));
            yield workflowItem.setLocal(remoteWorkflow.render());
            return;
        }
        const localWorkflow = yield workflowItem.getLocal();
        const newWorkflow = new merger_1.Merger(forceUpdate).merge(localWorkflow, remoteWorkflow);
        if (removeMarker) {
            newWorkflow.jobs.forEach(job => job.steps.forEach(step => step.makeNonManaged()));
        }
        yield workflowItem.setLocal(newWorkflow.render());
    });
}
exports.runUpdate = runUpdate;
function runUpdateAll(resources, forceUpdate, showDiff, removeMarker) {
    return __awaiter(this, void 0, void 0, function* () {
        const checkLists = yield Promise.all(resources.map(resource => runCheck_1.runCheck(resource, forceUpdate, removeMarker)));
        resources.forEach((resource, index) => {
            console.log(resource.getTitle());
            const checks = checkLists[index];
            checks.forEach(check => logUpdate(check, forceUpdate, showDiff));
            logUpdate(runCheck_1.getCheckResult(resource, checks, forceUpdate), false, false);
        });
        const updatedItems = resources.filter((resource, index) => {
            if (!resource.existsLocally())
                return true;
            const checks = checkLists[index];
            const applyChecks = checks.filter(check => check.isApplied(forceUpdate));
            return applyChecks.length > 0;
        });
        if (updatedItems.length)
            yield Promise.all(updatedItems.map(resource => runUpdate(resource, forceUpdate, removeMarker)));
    });
}
exports.runUpdateAll = runUpdateAll;
