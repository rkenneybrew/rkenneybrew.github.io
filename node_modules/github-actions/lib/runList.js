"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runListAll = exports.runList = void 0;
const chalk_1 = __importDefault(require("chalk"));
function runList(resource, workflow) {
    const state = resource.existsLocally()
        ? "is installed to"
        : "can be installed to";
    console.log(`${chalk_1.default.blue(workflow.name)} ${chalk_1.default.grey(state)} ${chalk_1.default.bold(resource.path)}`);
    if (workflow.commentLines.length) {
        workflow.commentLines.forEach(line => console.log(`  ${line}`));
        console.log("");
    }
}
exports.runList = runList;
function runListAll(resources) {
    return __awaiter(this, void 0, void 0, function* () {
        const workflows = yield Promise.all(resources.map(resource => resource.getRemote()));
        resources.forEach((resource, index) => {
            const workflow = workflows[index];
            runList(resource, workflow);
        });
    });
}
exports.runListAll = runListAll;
