"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCheckAll = exports.runCheck = exports.getCheckResult = exports.logCheck = void 0;
const chalk_1 = __importDefault(require("chalk"));
const differ_1 = require("./differ");
const check_1 = require("./workflow/check");
const checker_1 = require("./workflow/checker");
const merger_1 = require("./workflow/merger");
function logCheck(check, forceUpdate = false, showDiff = false) {
    if (check.action === "equal")
        return;
    if (!forceUpdate && check.force) {
        return console.log(chalk_1.default.grey(`  ${check.noForceMessage}`));
    }
    console.log(check.color(`  ${check.checkMessage}`));
    if (showDiff)
        differ_1.logDiff(check.oldValue, check.newValue);
}
exports.logCheck = logCheck;
function getCheckResult(resource, checks, forceUpdate) {
    const errorChecks = checks.filter(check => check.isError());
    if (errorChecks.length)
        return new check_1.Check("error", "error", false, "has errors");
    if (!resource.existsLocally())
        return new check_1.Check("workflow", "added");
    const applyChecks = checks.filter(check => check.isApplied(forceUpdate));
    if (applyChecks.length)
        return new check_1.Check("workflow", "updated");
    return new check_1.Check("workflow", "up to date");
}
exports.getCheckResult = getCheckResult;
function runCheck(workflowItem, forceUpdate, removeMarker) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!workflowItem.existsLocally()) {
            return [];
        }
        const localWorkflow = yield workflowItem.getLocal();
        let remoteWorkflow;
        try {
            remoteWorkflow = yield workflowItem.getRemote();
        }
        catch (e) {
            return [new check_1.Check("error", "error", false, `${e}`)];
        }
        const checker = new checker_1.Checker(forceUpdate, localWorkflow);
        const newWorkflow = new merger_1.Merger(true).merge(localWorkflow, remoteWorkflow);
        if (removeMarker) {
            newWorkflow.jobs.forEach(job => job.steps.forEach(step => step.makeNonManaged()));
        }
        return checker.getChecks(newWorkflow);
    });
}
exports.runCheck = runCheck;
function runCheckAll(resources, forceUpdate, showDiff, removeMarker) {
    return __awaiter(this, void 0, void 0, function* () {
        const checkLists = yield Promise.all(resources.map(resource => runCheck(resource, forceUpdate, removeMarker)));
        const errorChecks = [];
        resources.forEach((resource, index) => {
            console.log(resource.getTitle());
            const checks = checkLists[index];
            errorChecks.push(...checks.filter(check => check.isError()));
            checks.forEach(check => logCheck(check, forceUpdate, showDiff));
            logCheck(getCheckResult(resource, checks, forceUpdate), false, false);
        });
        return errorChecks.length === 0;
    });
}
exports.runCheckAll = runCheckAll;
